import math

#Best Simple:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = "".join(filter(lambda c: 'a' <= c <= 'z' or '0' <= c <= '9', s.lower()))
        
        for i in range(len(s) // 2):
            if s[i] != s[-i - 1]:
                return False
        
        return True
        
#Best Two Pointer

import math

class Solution:
    def isPalindrome(self, s: str) -> bool:
        # Idea: Two pointers, starting from start/end, walk inward and skip over invalid alphanumeric characters.
        # Time: O(N), Memory: O(1)

        def valid_alphanumeric(c):
            return 'A' <= c <= 'Z' or 'a' <= c <= 'z' or '0' <= c <= '9'

        start = 0
        end = len(s) - 1

        while start < end:
            # Advance only start
            if not valid_alphanumeric(s[start]):
                start += 1

            # Advance only end
            elif not valid_alphanumeric(s[end]):
                end -= 1

            # Advance both and check equality
            else:
                if s[start].lower() != s[end].lower():
                    return False

                start += 1
                end -= 1
       
        # Loop finished, so nothing was inequal, return True.
        return True
        
#Number Version:
def isPalindrome(self, x):
    if x > 0:
        temp = x
        rev_int_elements = []
        while temp > 0:
            digit = temp % 10
            rev_int_elements.append(digit)
            temp = temp // 10
        org_int_elements = rev_int_elements[::-1]
        return rev_int_elements == org_int_elements
    elif x == 0:
        return True
    else:
        return False

#Variant 1:


class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = "".join(filter(lambda c: 'z' >= c >= 'a' or '9' >= c >= '0', s.lower()))
        
        if len(s) == 1:
            return True
        
        first = s[:int(len(s) / 2.0)]
        second = s[int(math.ceil(len(s) / 2.0)):][::-1]
        
        return first == second
        



#Variant 2:
        
        

class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = "".join(filter(lambda c: 'a' <= c <= 'z' or '0' <= c <= '9', s.lower()))
        
        if len(s) == 1:
            return True
        
        first = s[:int(len(s) / 2.0)]
        second = s[len(s) : int(math.ceil(len(s) / 2.0)) - 1 : -1]
        
        return first == second
        

#Variant 3:        

class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = "".join(filter(lambda c: 'z' >= c >= 'a' or '9' >= c >= '0', s.lower()))
        return s[:int(len(s) / 2.0)] == s[int(math.ceil(len(s) / 2.0)):][::-1] if len(s) != 1 else True
